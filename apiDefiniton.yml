openapi: 3.0.0
info:
  description: Backend API for 
  version: "1.0.0"
  title: App API
paths:
  /friendRequest:
    options:
      summary: CORS support
      description: Enable CORS by returning correct headers
      tags:
      - CORS
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    post:
      summary: get profiles info
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FriendRequest"
      responses:
        "200":
          description: profiles.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserProfile"
        "500":
          description: server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "400":
          description: bad request, missing mandatory fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-integration: #amazon api gateway integration
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::GetAtt: ["ApiHandlerLambdaFunction", "Arn"]
              - "/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /friendRequest/{profileId}:
    get:
      summary: get profiles info
      parameters:
        - in: path
          name: profileId # Note the name is the same as in the path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: profiles.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FriendRequest"
        "500":
          description: server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "400":
          description: bad request, missing mandatory fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-integration: #amazon api gateway integration
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::GetAtt: ["ApiHandlerLambdaFunction", "Arn"]
              - "/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /userProfile:
    options:
      summary: CORS support
      description: Enable CORS by returning correct headers
      tags:
      - CORS
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    get:
      summary: get profiles info
      responses:
        "200":
          description: profiles.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserProfile"
        "500":
          description: server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "400":
          description: bad request, missing mandatory fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-integration: #amazon api gateway integration
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::GetAtt: ["ApiHandlerLambdaFunction", "Arn"]
              - "/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
    post:
      summary: get profiles info
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserProfile"
      responses:
        "200":
          description: profiles.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserProfile"
        "500":
          description: server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "400":
          description: bad request, missing mandatory fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-integration: #amazon api gateway integration
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::GetAtt: ["ApiHandlerLambdaFunction", "Arn"]
              - "/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /userProfile/{profileId}:
    get:
      summary: Get User Profile
      parameters:
        - in: path
          name: profileId # Note the name is the same as in the path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: User Profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "500":
          description: server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "400":
          description: bad request, missing mandatory fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-integration: #amazon api gateway integration
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::GetAtt: ["ApiHandlerLambdaFunction", "Arn"]
              - "/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /userProfile/{profileId}/friends:
    get:
      summary: Get Friends From
      parameters:
        - in: path
          name: profileId # Note the name is the same as in the path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: User Profile
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserProfile"
        "500":
          description: server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "400":
          description: bad request, missing mandatory fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-integration: #amazon api gateway integration
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::GetAtt: ["ApiHandlerLambdaFunction", "Arn"]
              - "/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
  /friendsEvent:
    post: 
      summary: get profiles info
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FriendsEvent"
      responses:
        "200":
          description: profiles.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FriendsEvent"
        "500":
          description: server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "400":
          description: bad request, missing mandatory fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-integration: #amazon api gateway integration
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::GetAtt: ["ApiHandlerLambdaFunction", "Arn"]
              - "/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws_proxy"
components:
  schemas:
    FriendRequest:
      type: object
      required:
        - fromUserProfileId
        - toUserProfileId
      properties:
        id:
          type: integer
          format: int64
          description: id
        fromUserProfileId:
          type: integer
          format: int64
          description: id
        toUserProfileId:
          type: integer
          format: int64
          description: id
        requestStatus:
          type: integer
          format: int32
          description: id
    UserProfile:
      type: object
      required:
        - firstName
        - lastName
        - email
        - maxContactsPerMeeting
      properties:
        id:
          type: integer
          format: int64
          description: id
        firstName:
          type: string
          description: First Name.
        lastName:
          type: string
          description: Last Name
        email:
          type: string
          format: email
          description: email address
        phone:
          type: string
          description: telephone number
        maxContactsPerMeeting:
          type: integer
          format: int32
          description: max buddies to meet at once
    FriendsEvent:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: id
        startDateTime:
          type: string
          format: date
        endDateTime:
          type: string
          format: date
        friendsEventGuests:
          type: array
          items:
            type: integer
            format: int64
    Error:
      type: object
      properties:
        message:
          type: string
          description: error message
